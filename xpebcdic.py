#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
# By HarJIT in 2019.

import ast

# Referencing https://www.unicode.org/reports/tr16/tr16-8.html
# Differs from the https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/EBCDIC/CP037.TXT control
# mappings slightly in terms of which way around LF and NL are. But the table from the UTF-EBCDIC
# standard seems the most sensible choice for a generic EBCDIC correspondance.
ebcdic_to_ecma35 = [
    0x00, 0x01, 0x02, 0x03, 0x9C, 0x09, 0x86, 0x7F, 0x97, 0x8D, 0x8E, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
    0x10, 0x11, 0x12, 0x13, 0x9D, 0x0A, 0x08, 0x87, 0x18, 0x19, 0x92, 0x8F, 0x1C, 0x1D, 0x1E, 0x1F,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x17, 0x1B, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x05, 0x06, 0x07,
    0x90, 0x91, 0x16, 0x93, 0x94, 0x95, 0x96, 0x04, 0x98, 0x99, 0x9A, 0x9B, 0x14, 0x15, 0x9E, 0x1A,
    0x20, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x2E, 0x3C, 0x28, 0x2B, 0x7C,
    0x26, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0x21, 0x24, 0x2A, 0x29, 0x3B, 0x5E,
    0x2D, 0x2F, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0x2C, 0x25, 0x5F, 0x3E, 0x3F,
    0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0x60, 0x3A, 0x23, 0x40, 0x27, 0x3D, 0x22,
    0xC5, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB,
    0xCC, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2,
    0xD3, 0x7E, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xD4, 0xD5, 0xD6, 0x5B, 0xD7, 0xD8,
    0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0x5D, 0xE6, 0xE7,
    0x7B, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED,
    0x7D, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3,
    0x5C, 0xF4, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x9F]

# https://web.archive.org/web/20180911044845/https://www-01.ibm.com/software/globalization/cdra/appendix_g1.html
ebcdic_ctrls = [
    "NUL",
    "SOH",
    "STX",
    "ETX",
    "SEL", # Select
    "HT",
    "RNL", # Required Newline
    "DEL",
    "GE", # Graphic Escape (EBCDIC single shift)
    "SPS", # Superscript (pretty much PLU)
    "RPT", # Repeat
    "VT",
    "FF",
    "CR",
    "IBMSO", # Same concept as ASCII, but obviously there's no GL/GR division in EBCDIC.
    "IBMSI",
    "DLE",
    "DC1",
    "DC2",
    "DC3",
    "RES/ENP", # Restore or Enable Presentation
    "NL", # Newline (ANSI's "NEL")
    "BS",
    "POC", # Program Operator Communication
    "CAN",
    "EM",
    "UBS", # Unit Backspace (i.e. partial backspace)
    "CU1", # Customer Use One
    "IFS", # Interchange File Separator
    "IGS", # Interchange Group Separator
    "IRS", # Interchange Record Separator
    "IUS/ITB", # Interchange Unit Separator or Intermediate Transmission Block
    "DS", # Digit Select
    "IBMSOS", # Start of Significance
    "IBMFS", # Field Separator
    "WUS", # Word Underscore (i.e. underline previous word)
    "BYP/INP", # Bypass or Inhibit Presentation
    "LF",
    "ETB",
    "ESC",
    "SA", # Set Attribute (deprecated in favour of CSP)
    "SFE", # Start Field Extended (deprecated in favour of CSP)
    "SM/SW", # Set Mode or Switch
    "CSP", # Control Sequence Prefix
    "MFA", # Modify Field Attribute (deprecated in favour of CSP)
    "ENQ",
    "ACK",
    "BEL",
    None,
    None,
    "SYN",
    "IR", # Index Return
    "PP", # Presentation Position
    "TRN", # Transparant (i.e. prefixes a raw Pascal-string)
    "NBS", # Numeric Backspace (i.e. negative figure-space)
    "EOT",
    "SBS", # Subscript (basically PLD)
    "IT", # Indent Tab (i.e. HT now and after every NL until a RNL or RFF)
    "RFF", # Required Form Feed
    "CU3", # Customer Use Three (there appears not to be a CU2)
    "DC4",
    "NAK",
    None,
    "SUB"] # (Plus EO, Eight Ones, at 0xFF)

c0ibm = [...] * 32
c1ibm = [...] * 32
for n, i in list(enumerate(ebcdic_ctrls)) + [(0xFF, "EO")]:
    ecma35 = ebcdic_to_ecma35[n]
    if 0 <= ecma35 < 0x20:
        c0ibm[ecma35] = i
    elif 0x80 <= ecma35 < 0xA0:
        c1ibm[ecma35 - 0x80] = i

def readms(fn):
    g0 = [...] * 94
    g1 = [...] * 96
    for line in open(fn, "r"):
        if line[0] == "#" or not line.lstrip().lstrip("\x1A"):
            continue
        ebcdic, ucs = [ast.literal_eval(i) for i in line.split(None, 2)[:2]]
        ecma35 = ebcdic_to_ecma35[ebcdic]
        if 0x21 <= ecma35 < 0x7F:
            g0[ecma35 - 0x21] = ucs if ucs != 0x1A else None
        elif 0xA0 <= ecma35:
            g1[ecma35 - 0xA0] = ucs if ucs != 0x1A else None
    return g0, g1
    


















    
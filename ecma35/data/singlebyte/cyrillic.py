#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
# By HarJIT in 2019, 2020, 2022, 2024.

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

from ecma35.data import graphdata
from ecma35.data.singlebyte import sbmapparsers as parsers

# KOI-7 N1, ISO 5427-1, used in MARC 21 as the "Basic Cyrillic" set.
graphdata.gsets["ir037"] = (94, 1, ((0x21,), (0x22,), (0x23,), (0xA4,), (0x25,), (0x26,), (0x27,), (0x28,), (0x29,), (0x2A,), (0x2B,), (0x2C,), (0x2D,), (0x2E,), (0x2F,), (0x30,), (0x31,), (0x32,), (0x33,), (0x34,), (0x35,), (0x36,), (0x37,), (0x38,), (0x39,), (0x3A,), (0x3B,), (0x3C,), (0x3D,), (0x3E,), (0x3F,), (0x044E,), (0x0430,), (0x0431,), (0x0446,), (0x0434,), (0x0435,), (0x0444,), (0x0433,), (0x0445,), (0x0438,), (0x0439,), (0x043A,), (0x043B,), (0x043C,), (0x043D,), (0x043E,), (0x043F,), (0x044F,), (0x0440,), (0x0441,), (0x0442,), (0x0443,), (0x0436,), (0x0432,), (0x044C,), (0x044B,), (0x0437,), (0x0448,), (0x044D,), (0x0449,), (0x0447,), (0x044A,), (0x042E,), (0x0410,), (0x0411,), (0x0426,), (0x0414,), (0x0415,), (0x0424,), (0x0413,), (0x0425,), (0x0418,), (0x0419,), (0x041A,), (0x041B,), (0x041C,), (0x041D,), (0x041E,), (0x041F,), (0x042F,), (0x0420,), (0x0421,), (0x0422,), (0x0423,), (0x0416,), (0x0412,), (0x042C,), (0x042B,), (0x0417,), (0x0428,), (0x042D,), (0x0429,), (0x0427,)))

# KOI-7 N2
graphdata.gsets["shortkoi"] = (94, 1, ((0x21,), (0x22,), (0x23,), (0xA4,), (0x25,), (0x26,), (0x27,), (0x28,), (0x29,), (0x2A,), (0x2B,), (0x2C,), (0x2D,), (0x2E,), (0x2F,), (0x30,), (0x31,), (0x32,), (0x33,), (0x34,), (0x35,), (0x36,), (0x37,), (0x38,), (0x39,), (0x3A,), (0x3B,), (0x3C,), (0x3D,), (0x3E,), (0x3F,), (0x40,), (0x41,), (0x42,), (0x43,), (0x44,), (0x45,), (0x46,), (0x47,), (0x48,), (0x49,), (0x4A,), (0x4B,), (0x4C,), (0x4D,), (0x4E,), (0x4F,), (0x50,), (0x51,), (0x52,), (0x53,), (0x54,), (0x55,), (0x56,), (0x57,), (0x58,), (0x59,), (0x5A,), (0x5B,), (0x5C,), (0x5D,), (0x5E,), (0x5F,), (0x042E,), (0x0410,), (0x0411,), (0x0426,), (0x0414,), (0x0415,), (0x0424,), (0x0413,), (0x0425,), (0x0418,), (0x0419,), (0x041A,), (0x041B,), (0x041C,), (0x041D,), (0x041E,), (0x041F,), (0x042F,), (0x0420,), (0x0421,), (0x0422,), (0x0423,), (0x0416,), (0x0412,), (0x042C,), (0x042B,), (0x0417,), (0x0428,), (0x042D,), (0x0429,), (0x0427,)))

# INIS Cyrillic, a variant of KOI-8 (notably lacking any yo)
graphdata.gsets["ir051"] = (94, 1, (
               None,      None,      None,      None,      None,      None,      None,
    None,      None,      None,      None,      (0x221A,), None,      (0x2192,), (0x222B,),
    (0x03B1,), (0x03B2,), (0x03B3,), (0x03C3,), (0x03A3,), (0x03BC,), (0x03BD,), (0x03C9,),
    (0x03C0,), (0x039E,), (0x0394,), (0x039B,), (0x03A9,), (0x042A,), (0x207B,), (0x207A,),
    (0x044E,), (0x0430,), (0x0431,), (0x0446,), (0x0434,), (0x0435,), (0x0444,), (0x0433,),
    (0x0445,), (0x0438,), (0x0439,), (0x043A,), (0x043B,), (0x043C,), (0x043D,), (0x043E,),
    (0x043F,), (0x044F,), (0x0440,), (0x0441,), (0x0442,), (0x0443,), (0x0436,), (0x0432,),
    (0x044C,), (0x044B,), (0x0437,), (0x0448,), (0x044D,), (0x0449,), (0x0447,), (0x044A,),
    (0x042E,), (0x0410,), (0x0411,), (0x0426,), (0x0414,), (0x0415,), (0x0424,), (0x0413,),
    (0x0425,), (0x0418,), (0x0419,), (0x041A,), (0x041B,), (0x041C,), (0x041D,), (0x041E,),
    (0x041F,), (0x042F,), (0x0420,), (0x0421,), (0x0422,), (0x0423,), (0x0416,), (0x0412,),
    (0x042C,), (0x042B,), (0x0417,), (0x0428,), (0x042D,), (0x0429,), (0x0427,),
))

# KOI-8 RHS with no extensions. This is the real GOST-19768:1974's RHS, but very different from the
#   IANA's "GOST_19768-74" (see comments on "ir153" below).
graphdata.gsets["ir051/dec"] = (94, 1, (
               None,      None,      None,      None,      None,      None,      None,
    None,      None,      None,      None,      None,      None,      None,      None,
    None,      None,      None,      None,      None,      None,      None,      None,
    None,      None,      None,      None,      None,      None,      None,      None,
    (0x044E,), (0x0430,), (0x0431,), (0x0446,), (0x0434,), (0x0435,), (0x0444,), (0x0433,),
    (0x0445,), (0x0438,), (0x0439,), (0x043A,), (0x043B,), (0x043C,), (0x043D,), (0x043E,),
    (0x043F,), (0x044F,), (0x0440,), (0x0441,), (0x0442,), (0x0443,), (0x0436,), (0x0432,),
    (0x044C,), (0x044B,), (0x0437,), (0x0448,), (0x044D,), (0x0449,), (0x0447,), (0x044A,),
    (0x042E,), (0x0410,), (0x0411,), (0x0426,), (0x0414,), (0x0415,), (0x0424,), (0x0413,),
    (0x0425,), (0x0418,), (0x0419,), (0x041A,), (0x041B,), (0x041C,), (0x041D,), (0x041E,),
    (0x041F,), (0x042F,), (0x0420,), (0x0421,), (0x0422,), (0x0423,), (0x0416,), (0x0412,),
    (0x042C,), (0x042B,), (0x0417,), (0x0428,), (0x042D,), (0x0429,), (0x0427,),
))

# ISO 5427-2, supplement for non-Russian Cyrillic letters absent in KOI-7, used in MARC 21 as the
#   "Extended Cyrillic" set.
graphdata.gsets["ir054"] = (94, 1, (
               None,      None,      None,      None,      None,      None,      None,
    None,      None,      None,      None,      None,      None,      None,      None,
    None,      None,      None,      None,      None,      None,      None,      None,
    None,      None,      None,      None,      None,      None,      None,      None,
    (0x0491,), (0x0452,), (0x0453,), (0x0454,), (0x0451,), (0x0455,), (0x0456,), (0x0457,),
    (0x0458,), (0x0459,), (0x045A,), (0x045B,), (0x045C,), (0x045E,), (0x045F,), None,
    (0x0463,), (0x0473,), (0x0475,), (0x046B,), None,      None,      None,      None,
    None,      None,      None,      (0x005B,), None,      (0x005D,), None,      (0x005F,),
    (0x0490,), (0x0402,), (0x0403,), (0x0404,), (0x0401,), (0x0405,), (0x0406,), (0x0407,),
    (0x0408,), (0x0409,), (0x040A,), (0x040B,), (0x040C,), (0x040E,), (0x040F,), (0x042A,),
    (0x0462,), (0x0472,), (0x0474,), (0x046A,), None,      None,      None,      None,
    None,      None,      None,      None,      None,      None,      None,
))

# ECMA-113:1986 ISO-DIS-8859-5:1987 KOI8-E RHS
# Following the ISO-IR-111 reg and ECMA-113:1986 (not later, which would be 144):
graphdata.gsets["ir111"] = (96, 1, tuple((i,) for i in (
             0x00A0, 0x0452, 0x0453, 0x0451, 0x0454, 0x0455, 0x0456, 0x0457, 
             0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x00AD, 0x045E, 0x045F,
             0x2116, 0x0402, 0x0403, 0x0401, 0x0404, 0x0405, 0x0406, 0x0407, 
             0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x00A4, 0x040E, 0x040F, 
             0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433, 
             0x0445, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 
             0x043F, 0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432, 
             0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A, 
             0x042E, 0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413, 
             0x0425, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 
             0x041F, 0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412, 
             0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A)))
# Following the very, very different (mistaken but influential) definition in RFC 1345:
graphdata.gsets["rfc1345-ir111"] = (96, 1, tuple((i,) for i in (
             0x00A0, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407, 
             0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x00AD, 0x040E, 0x040F, 
             0x2116, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457, 
             0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x00A4, 0x045E, 0x045F, 
             0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 
             0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 
             0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 
             0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 
             0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 
             0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 
             0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 
             0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F)))

# ECMA-113:1988+ ISO-8859-5 Latin/Cyrillic RHS
graphdata.gsets["ir144"] = (96, 1, tuple((i,) for i in (
             0x00A0, 0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407, 
             0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x00AD, 0x040E, 0x040F, 
             0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 
             0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 
             0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 
             0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 
             0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 
             0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 
             0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 
             0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 
             0x2116, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457, 
             0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x00A7, 0x045E, 0x045F)))

# JUS-I.B1.003 SRPSCII Cyrillic
graphdata.gsets["ir146"] = (94, 1, (
             (0x21,), (0x22,), (0x23,), (0x24,), (0x25,), (0x26,), (0x27,),
    (0x28,), (0x29,), (0x2A,), (0x2B,), (0x2C,), (0x2D,), (0x2E,), (0x2F,), 
    (0x30,), (0x31,), (0x32,), (0x33,), (0x34,), (0x35,), (0x36,), (0x37,), 
    (0x38,), (0x39,), (0x3A,), (0x3B,), (0x3C,), (0x3D,), (0x3E,), (0x3F,), 
    (0x0416,), (0x0410,), (0x0411,), (0x0426,), (0x0414,), (0x0415,), (0x0424,), (0x0413,), 
    (0x0425,), (0x0418,), (0x0408,), (0x041A,), (0x041B,), (0x041C,), (0x041D,), (0x041E,), 
    (0x041F,), (0x0409,), (0x0420,), (0x0421,), (0x0422,), (0x0423,), (0x0412,), (0x040A,), 
    (0x040F,), (0x0405,), (0x0417,), (0x0428,), (0x0402,), (0x040B,), (0x0427,), (0x5F,), 
    (0x0436,), (0x0430,), (0x0431,), (0x0446,), (0x0434,), (0x0435,), (0x0444,), (0x0433,), 
    (0x0445,), (0x0438,), (0x0458,), (0x043A,), (0x043B,), (0x043C,), (0x043D,), (0x043E,), 
    (0x043F,), (0x0459,), (0x0440,), (0x0441,), (0x0442,), (0x0443,), (0x0432,), (0x045A,), 
    (0x045F,), (0x0455,), (0x0437,), (0x0448,), (0x0452,), (0x045B,), (0x0447,),
))

# JUS-I.B1.004 MAKSCII Cyrillic
graphdata.gsets["ir147"] = (94, 1, (
             (0x21,), (0x22,), (0x23,), (0x24,), (0x25,), (0x26,), (0x27,),
    (0x28,), (0x29,), (0x2A,), (0x2B,), (0x2C,), (0x2D,), (0x2E,), (0x2F,), 
    (0x30,), (0x31,), (0x32,), (0x33,), (0x34,), (0x35,), (0x36,), (0x37,), 
    (0x38,), (0x39,), (0x3A,), (0x3B,), (0x3C,), (0x3D,), (0x3E,), (0x3F,), 
    (0x0416,), (0x0410,), (0x0411,), (0x0426,), (0x0414,), (0x0415,), (0x0424,), (0x0413,), 
    (0x0425,), (0x0418,), (0x0408,), (0x041A,), (0x041B,), (0x041C,), (0x041D,), (0x041E,), 
    (0x041F,), (0x0409,), (0x0420,), (0x0421,), (0x0422,), (0x0423,), (0x0412,), (0x040A,), 
    (0x040F,), (0x0405,), (0x0417,), (0x0428,), (0x0403,), (0x040C,), (0x0427,), (0x5F,), 
    (0x0436,), (0x0430,), (0x0431,), (0x0446,), (0x0434,), (0x0435,), (0x0444,), (0x0433,), 
    (0x0445,), (0x0438,), (0x0458,), (0x043A,), (0x043B,), (0x043C,), (0x043D,), (0x043E,), 
    (0x043F,), (0x0459,), (0x0440,), (0x0441,), (0x0442,), (0x0443,), (0x0432,), (0x045A,), 
    (0x045F,), (0x0455,), (0x0437,), (0x0448,), (0x0453,), (0x045C,), (0x0447,),
))

# TODO: Teletext Serbian Cyrillic

# ST-SEV-358:1988, GOST-R-34.303-V1:1992, ostensible / possibly-unpublished GOST-19768:1987, often
#   mis-cited as GOST-19768:1974 (in its ISO-IR reg, even having "GOST_19768-74" as its default
#   IANA label; *real* GOST-19768:1974's RHS is the intersection of IR-051 and the real IR-111, or
#   what we're calling "ir051/dec").
# This is basically the Russian/Bulgarian subset of ISO-8859-5.
graphdata.gsets["ir153"] = (96, 1, tuple((i,) if i else None for i in (
             0x00A0, 0x0401, None,   None,   None,   None,   None,   None,   
             None,   None,   None,   None,   None,   0x00AD, None,   None,   
             0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 
             0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 
             0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 
             0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 
             0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 
             0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 
             0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 
             0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 
             None,   0x0451, None,   None,   None,   None,   None,   None,   
             None,   None,   None,   None,   None,   None,   None,   None)))

# Barents-Uralic Cyrillic (Everson-Gunn), an alternative superset of IR-153 besides ISO-8859-5
graphdata.gsets["ir200"] = (96, 1, tuple((i,) if i else None for i in (
             0x00A0, 0x0401, 0x04C7, 0x04D2, 0x04EC, 0x048C, 0x0406, 0x04E6,   
             0x048A, 0x04C5, 0x04C9, 0x00AB, 0x04CD, 0x00AD, 0x048E, 0x02BC,   
             0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 
             0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 
             0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 
             0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 
             0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 
             0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 
             0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 
             0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 
             0x2116, 0x0451, 0x04C8, 0x04D3, 0x04ED, 0x048D, 0x0456, 0x04E7,   
             0x048B, 0x04C6, 0x04CA, 0x00BB, 0x04CE, 0x00A7, 0x048F, 0x02EE)))

# Volga-Uralic and Volga-Turkic Cyrillic (Everson-Gunn), another superset of IR-153
graphdata.gsets["ir201"] = (96, 1, tuple((i,) if i else None for i in (
             0x00A0, 0x0401, 0x04D0, 0x04D2, 0x04D6, 0x04AA, 0x0406, 0x04E6,   
             0x04E4, 0x04DC, 0x04A4, 0x04F8, 0x04DE, 0x00AD, 0x04F0, 0x04F4,   
             0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 
             0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F, 
             0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 
             0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F, 
             0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 
             0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F, 
             0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 
             0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F, 
             0x2116, 0x0451, 0x04D1, 0x04D3, 0x04D7, 0x04AB, 0x0456, 0x04E7,   
             0x04E5, 0x04DD, 0x04A5, 0x04F9, 0x04DF, 0x00A7, 0x04F1, 0x04F5)))

# Other KOI-8 encodings
graphdata.rhses["878"] = graphdata.rhses["20866"] = parsers.read_single_byte("WHATWG/index-koi8-r.txt")
# TODO: number 21866 is in reality used for both KOI8-U and KOI8-RU. WHATWG's "KOI8-U" is a hybrid.
graphdata.rhses["1168"] = graphdata.rhses["21866"] = parsers.read_single_byte("WHATWG/index-koi8-u.txt")

# The Windows encoding
graphdata.rhses["1251"] = parsers.read_single_byte("WHATWG/index-windows-1251.txt")

# 10007/1283 is the original MacCyrillic; current MacCyrillic is a Euro update of 10017.
# Mappings to U+00A4 changed to U+20AC across the board, so number the current one 10017, and use
#   a version with that change but not the others for 10007/1283.
graphdata.rhses["10017"] = parsers.read_single_byte("WHATWG/index-x-mac-cyrillic.txt")
maccy = list(graphdata.rhses["10017"])
maccy[0x22] = (0x00A2,)
maccy[0x36] = (0x2202,)
graphdata.rhses["10007"] = graphdata.rhses["1283"] = tuple(maccy)

# OEM code pages
graphdata.rhses["855"] = parsers.read_single_byte("ICU/ibm-855_P100-1995.ucm") # non-Al’ternativnaja
graphdata.rhses["866"] = parsers.read_single_byte("WHATWG/index-ibm866.txt") # Russia; "Cyrillic (DOS)"
graphdata.rhses["1125"] = parsers.read_single_byte("ICU/ibm-1125_P100-1997.ucm") # Ukraine
graphdata.rhses["1131"] = parsers.read_single_byte("ICU/ibm-1131_P100-1997.ucm") # Belarus




